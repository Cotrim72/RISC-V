<?xml version="1.0" encoding="utf-8"?>
<circuit>
  <version>2</version>
  <attributes/>
  <visualElements>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>instruction_parser</string>
        </entry>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>instruction_i:32</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library ieee;
use ieee.std_logic_1164.all;

entity instruction_parser is
    port (
        instruction_i : in  std_logic_vector(31 downto 0); -- 32-bit RISC-V instruction

        -- Extracted fields
        opcode_o      : out std_logic_vector(6 downto 0);  -- bits 6-0
        rd_o          : out std_logic_vector(4 downto 0);  -- bits 11-7
        rs1_o         : out std_logic_vector(4 downto 0);  -- bits 19-15
        rs2_o         : out std_logic_vector(4 downto 0)  -- bits 24-20
    );
end entity instruction_parser;

architecture behavioral of instruction_parser is
begin

    -- Simple direct assignments for common fields
    opcode_o &lt;= instruction_i(6 downto 0);
    rd_o     &lt;= instruction_i(11 downto 7);
    rs1_o    &lt;= instruction_i(19 downto 15);
    rs2_o    &lt;= instruction_i(24 downto 20);

end architecture behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>opcode_o:7,rd_o:5,rs1_o:5,rs2_o:5</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>15</int>
        </entry>
      </elementAttributes>
      <pos x="320" y="300"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>control_unit</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>reset,opcode:7</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library ieee;
use ieee.std_logic_1164.all;

entity control_unit is
    port (
        -- Inputs
        reset       : in  std_logic;              -- Asynchronous reset signal
        opcode      : in  std_logic_vector(6 downto 0); -- 7-bit opcode from the instruction

        -- Outputs: Control signals for the datapath
        reg_write   : out std_logic;              -- Enable writing to the register file
        mem_to_reg  : out std_logic;              -- Selects if data from memory goes to the register file (for loads)
        mem_read    : out std_logic;              -- Enables reading from data memory
        mem_write   : out std_logic;              -- Enables writing to data memory
        alu_src     : out std_logic;              -- Selects the second ALU source:
                                                  -- &apos;0&apos; = rs2 data (for R-type)
                                                  -- &apos;1&apos; = immediate (for I, S, B, U, J-types)
        branch      : out std_logic;              -- Indicates a conditional branch instruction
        jump        : out std_logic;              -- Indicates an unconditional jump instruction (JAL, JALR)
        alu_op      : out std_logic_vector(1 downto 0) -- Controls the ALU&apos;s main operation:
                                                  -- &quot;00&quot; = Add (for Loads/Stores/AUIPC/LUI/JAL/JALR address calc or pass-through)
                                                  -- &quot;01&quot; = Subtract (for Branches for comparison)
                                                  -- &quot;10&quot; = R-type operation (further decoded by funct3/funct7)
                                                  -- &quot;11&quot; = I-type operation (further decoded by funct3)
    );
end entity control_unit;

architecture behavioral of control_unit is
    -- Define the opcodes for different instruction types as constants for readability
    constant R_TYPE_OP   : std_logic_vector(6 downto 0) := &quot;0110011&quot;; -- OP (e.g., ADD, SUB, AND, OR, XOR)
    constant I_TYPE_OP   : std_logic_vector(6 downto 0) := &quot;0010011&quot;; -- OP-IMM (e.g., ADDI, ANDI, ORI)
    constant L_TYPE_OP   : std_logic_vector(6 downto 0) := &quot;0000011&quot;; -- LOAD (e.g., LW)
    constant S_TYPE_OP   : std_logic_vector(6 downto 0) := &quot;0100011&quot;; -- STORE (e.g., SW)
    constant B_TYPE_OP   : std_logic_vector(6 downto 0) := &quot;1100011&quot;; -- BRANCH (e.g., BEQ, BNE)
    constant JAL_OP      : std_logic_vector(6 downto 0) := &quot;1101111&quot;; -- JAL (Jump and Link)
    constant JALR_OP     : std_logic_vector(6 downto 0) := &quot;1100111&quot;; -- JALR (Jump and Link Register)
    constant LUI_OP      : std_logic_vector(6 downto 0) := &quot;0110111&quot;; -- LUI (Load Upper Immediate)
    constant AUIPC_OP    : std_logic_vector(6 downto 0) := &quot;0010111&quot;; -- AUIPC (Add Upper Immediate to PC)

begin

    -- Main control logic process.
    -- This process is sensitive to both &apos;reset&apos; and &apos;opcode&apos;.
    -- All output signals must be assigned within this single process to avoid latches.
    process(reset, opcode)
    begin
        -- Handle asynchronous reset with highest priority.
        -- When &apos;reset&apos; is &apos;1&apos;, all control signals are forced to their inactive state.
        if reset = &apos;1&apos; then
            reg_write  &lt;= &apos;0&apos;;
            mem_to_reg &lt;= &apos;0&apos;;
            mem_read   &lt;= &apos;0&apos;;
            mem_write  &lt;= &apos;0&apos;;
            alu_src    &lt;= &apos;0&apos;;
            branch     &lt;= &apos;0&apos;;
            jump       &lt;= &apos;0&apos;;
            alu_op     &lt;= &quot;00&quot;; -- Default ALU operation (e.g., add or pass-through)
        else
            -- Default assignments for all control signals when not under reset.
            -- This ensures that for any opcode not explicitly covered in the case
            -- statement (or before an opcode is processed), signals have a known,
            -- safe default (e.g., NOP-like behavior, no writes, no branches/jumps).
            reg_write  &lt;= &apos;0&apos;;
            mem_to_reg &lt;= &apos;0&apos;;
            mem_read   &lt;= &apos;0&apos;;
            mem_write  &lt;= &apos;0&apos;;
            alu_src    &lt;= &apos;0&apos;;
            branch     &lt;= &apos;0&apos;;
            jump       &lt;= &apos;0&apos;;
            alu_op     &lt;= &quot;00&quot;; -- Default to &quot;00&quot; (Add/Pass-through) for ALU

            -- Use a case statement to decode the opcode and assert specific control signals.
            case opcode is
                -- R-Type instructions (e.g., ADD, SUB, AND, OR)
                -- Perform register-to-register operations, write result back to register file.
                when R_TYPE_OP =&gt;
                    reg_write  &lt;= &apos;1&apos;;     -- Enable write to register file
                    alu_src    &lt;= &apos;0&apos;;     -- Second ALU operand comes from rs2 (register value)
                    alu_op     &lt;= &quot;10&quot;;    -- ALU performs R-type specific operation (decoded by ALU Control)

                -- I-Type instructions (Arithmetic/Logical with Immediate, excluding Loads/JALR)
                -- (e.g., ADDI, ANDI, ORI)
                -- Perform operation with immediate, write result back to register file.
                when I_TYPE_OP =&gt;
                    reg_write  &lt;= &apos;1&apos;;     -- Enable write to register file
                    alu_src    &lt;= &apos;1&apos;;     -- Second ALU operand comes from immediate
                    alu_op     &lt;= &quot;11&quot;;    -- ALU performs I-type specific operation (decoded by ALU Control)

                -- Load instructions (I-type, e.g., LW)
                -- Calculate memory address using immediate, read from memory, write to register file.
                when L_TYPE_OP =&gt;
                    reg_write  &lt;= &apos;1&apos;;     -- Enable write to register file
                    mem_to_reg &lt;= &apos;1&apos;;     -- Data from memory is written to reg file
                    mem_read   &lt;= &apos;1&apos;;     -- Enable memory read
                    alu_src    &lt;= &apos;1&apos;;     -- Second ALU operand is immediate (for address calculation)
                    alu_op     &lt;= &quot;00&quot;;    -- ALU performs addition (base register + immediate offset)

                -- Store instructions (S-type, e.g., SW)
                -- Calculate memory address using immediate, write to memory.
                when S_TYPE_OP =&gt;
                    mem_write  &lt;= &apos;1&apos;;     -- Enable memory write
                    alu_src    &lt;= &apos;1&apos;;     -- Second ALU operand is immediate (for address calculation)
                    alu_op     &lt;= &quot;00&quot;;    -- ALU performs addition (base register + immediate offset)

                -- Branch instructions (B-type, e.g., BEQ, BNE)
                -- Compare two registers, enable branch if condition met.
                when B_TYPE_OP =&gt;
                    branch     &lt;= &apos;1&apos;;     -- Indicate a branch instruction
                    alu_op     &lt;= &quot;01&quot;;    -- ALU performs subtraction (for comparison)

                -- LUI (Load Upper Immediate)
                -- Loads a 20-bit immediate into the upper 20 bits of a register, clearing lower 12.
                when LUI_OP =&gt;
                    reg_write  &lt;= &apos;1&apos;;     -- Enable write to register file
                    alu_src    &lt;= &apos;1&apos;;     -- Immediate is used by ALU (often conceptually for a pass-through or add 0)
                    alu_op     &lt;= &quot;00&quot;;    -- ALU performs addition (effectively passes the immediate)

                -- AUIPC (Add Upper Immediate to PC)
                -- Adds a 20-bit immediate (shifted) to the PC, writes to register.
                when AUIPC_OP =&gt;
                    reg_write  &lt;= &apos;1&apos;;     -- Enable write to register file
                    alu_src    &lt;= &apos;1&apos;;     -- Immediate is used by ALU
                    alu_op     &lt;= &quot;00&quot;;    -- ALU performs addition (PC + immediate)

                -- JAL (Jump and Link)
                -- Unconditional jump, saves PC+4 to rd.
                when JAL_OP =&gt;
                    reg_write  &lt;= &apos;1&apos;;     -- Enable write to register file (for PC+4)
                    jump       &lt;= &apos;1&apos;;     -- Indicate an unconditional jump
                    alu_op     &lt;= &quot;00&quot;;    -- ALU may be used to calculate target address (PC + immediate) or pass PC+4

                -- JALR (Jump and Link Register)
                -- Unconditional jump to (rs1 + immediate), saves PC+4 to rd.
                when JALR_OP =&gt;
                    reg_write  &lt;= &apos;1&apos;;     -- Enable write to register file (for PC+4)
                    jump       &lt;= &apos;1&apos;;     -- Indicate an unconditional jump
                    alu_src    &lt;= &apos;1&apos;;     -- Immediate is used by ALU (for address calculation)
                    alu_op     &lt;= &quot;00&quot;;    -- ALU performs addition (rs1 + immediate)

                -- Default case for any other undefined or unsupported opcodes.
                -- All control signals remain in their default inactive state.
                when others =&gt;
                    null; -- Explicitly do nothing, as defaults are set above.
            end case;
        end if;
    end process;

end architecture behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>reg_write,mem_to_reg,mem_read,mem_write,alu_src,branch,jump,alu_op:2</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>15</int>
        </entry>
      </elementAttributes>
      <pos x="720" y="20"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>immediate_extractor</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>instruction_i:32</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity immediate_extractor is
    port (
        instruction_i : in  std_logic_vector(31 downto 0);
        immediate_o   : out std_logic_vector(31 downto 0)
    );
end entity immediate_extractor;

architecture behavioral of immediate_extractor is
    signal opcode_s : std_logic_vector(6 downto 0);
begin

    opcode_s &lt;= instruction_i(6 downto 0);

    process(instruction_i, opcode_s)
        variable imm : std_logic_vector(31 downto 0);
    begin
        case opcode_s is
            -- I-type
            when &quot;0000011&quot; | &quot;0010011&quot; | &quot;1100111&quot; =&gt;
                imm := (others =&gt; instruction_i(31));
                imm(11 downto 0) := instruction_i(31 downto 20);
                immediate_o &lt;= imm;

            -- S-type
            when &quot;0100011&quot; =&gt;
                imm := (others =&gt; instruction_i(31));
                imm(11 downto 5) := instruction_i(31 downto 25);
                imm(4 downto 0)  := instruction_i(11 downto 7);
                immediate_o &lt;= imm;

            -- B-type
            when &quot;1100011&quot; =&gt;
                imm := (others =&gt; instruction_i(31));
                imm(12)         := instruction_i(31);
                imm(11)         := instruction_i(7);
                imm(10 downto 5):= instruction_i(30 downto 25);
                imm(4 downto 1) := instruction_i(11 downto 8);
                imm(0)          := &apos;0&apos;;
                immediate_o &lt;= imm;

            -- U-type
            when &quot;0110111&quot; | &quot;0010111&quot; =&gt;
                imm := instruction_i(31 downto 12) &amp; (11 downto 0 =&gt; &apos;0&apos;);
                immediate_o &lt;= imm;

            -- J-type
            when &quot;1101111&quot; =&gt;
                imm := (others =&gt; instruction_i(31));
                imm(20)         := instruction_i(31);
                imm(19 downto 12):= instruction_i(19 downto 12);
                imm(11)         := instruction_i(20);
                imm(10 downto 1):= instruction_i(30 downto 21);
                imm(0)          := &apos;0&apos;;
                immediate_o &lt;= imm;

            -- Default
            when others =&gt;
                immediate_o &lt;= (others =&gt; &apos;0&apos;);
        end case;
    end process;

end architecture behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>immediate_o:32</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>15</int>
        </entry>
      </elementAttributes>
      <pos x="720" y="580"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>register_file</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>clk,reg_write,rs1_addr:5,rs2_addr:5,rd_addr:5,rd_data:32</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity register_file is
    port (
        clk      : in  std_logic;
        reg_write: in  std_logic; -- Control signal to enable writing
        rs1_addr : in  std_logic_vector(4 downto 0);
        rs2_addr : in  std_logic_vector(4 downto 0);
        rd_addr  : in  std_logic_vector(4 downto 0);
        rd_data  : in  std_logic_vector(31 downto 0);
        rs1_data : out std_logic_vector(31 downto 0);
        rs2_data : out std_logic_vector(31 downto 0)
    );
end entity register_file;

architecture behavioral of register_file is
    -- Define the storage for 32 registers, each 32 bits wide
    type reg_array is array (0 to 31) of std_logic_vector(31 downto 0);
    signal registers : reg_array := (others =&gt; (others =&gt; &apos;0&apos;));

begin

    -- Read Process: Synchronous to the rising edge (first half of the clock)
    read_proc: process(clk)
    begin
        if rising_edge(clk) then
            -- Read rs1. Reading x0 always returns zero.
            if rs1_addr = &quot;00000&quot; then
                rs1_data &lt;= (others =&gt; &apos;0&apos;);
            else
                rs1_data &lt;= registers(to_integer(unsigned(rs1_addr)));
            end if;

            -- Read rs2. Reading x0 always returns zero.
            if rs2_addr = &quot;00000&quot; then
                rs2_data &lt;= (others =&gt; &apos;0&apos;);
            else
                rs2_data &lt;= registers(to_integer(unsigned(rs2_addr)));
            end if;
        end if;
    end process read_proc;

    -- Write Process: Synchronous to the falling edge (second half of the clock)
    write_proc: process(clk)
    begin
        if falling_edge(clk) then
            -- Write only if reg_write is enabled and the destination is not x0
            if reg_write = &apos;1&apos; and rd_addr /= &quot;00000&quot; then
                registers(to_integer(unsigned(rd_addr))) &lt;= rd_data;
            end if;
        end if;
    end process write_proc;

end architecture behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>rs1_data:32,rs2_data:32</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>10</int>
        </entry>
      </elementAttributes>
      <pos x="780" y="360"/>
    </visualElement>
    <visualElement>
      <elementName>Const</elementName>
      <elementAttributes>
        <entry>
          <string>Value</string>
          <long>4263582435</long>
        </entry>
        <entry>
          <string>intFormat</string>
          <intFormat>hex</intFormat>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="140" y="300"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="1300" y="580"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>32</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="1300" y="360"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="1300" y="400"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>2</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>2</int>
        </entry>
      </elementAttributes>
      <pos x="1300" y="200"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes/>
      <pos x="1300" y="160"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes/>
      <pos x="1300" y="120"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes/>
      <pos x="1300" y="80"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes/>
      <pos x="1300" y="40"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes/>
      <pos x="1300" y="0"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes/>
      <pos x="1300" y="-40"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>intFormat</string>
          <intFormat>dec</intFormat>
        </entry>
      </elementAttributes>
      <pos x="1300" y="-80"/>
    </visualElement>
    <visualElement>
      <elementName>Clock</elementName>
      <elementAttributes/>
      <pos x="400" y="80"/>
    </visualElement>
    <visualElement>
      <elementName>Button</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
      </elementAttributes>
      <pos x="600" y="-100"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes/>
      <pos x="840" y="240"/>
    </visualElement>
    <visualElement>
      <elementName>Const</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="540" y="480"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>intFormat</string>
          <intFormat>bin</intFormat>
        </entry>
        <entry>
          <string>Bits</string>
          <int>7</int>
        </entry>
      </elementAttributes>
      <pos x="660" y="160"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>Bits</string>
          <int>5</int>
        </entry>
        <entry>
          <string>intFormat</string>
          <intFormat>decSigned</intFormat>
        </entry>
      </elementAttributes>
      <pos x="620" y="440"/>
    </visualElement>
  </visualElements>
  <wires>
    <wire>
      <p1 x="620" y="320"/>
      <p2 x="700" y="320"/>
    </wire>
    <wire>
      <p1 x="1080" y="0"/>
      <p2 x="1300" y="0"/>
    </wire>
    <wire>
      <p1 x="140" y="580"/>
      <p2 x="720" y="580"/>
    </wire>
    <wire>
      <p1 x="1020" y="580"/>
      <p2 x="1300" y="580"/>
    </wire>
    <wire>
      <p1 x="700" y="260"/>
      <p2 x="760" y="260"/>
    </wire>
    <wire>
      <p1 x="1260" y="200"/>
      <p2 x="1300" y="200"/>
    </wire>
    <wire>
      <p1 x="1020" y="140"/>
      <p2 x="1280" y="140"/>
    </wire>
    <wire>
      <p1 x="740" y="460"/>
      <p2 x="780" y="460"/>
    </wire>
    <wire>
      <p1 x="1040" y="-80"/>
      <p2 x="1300" y="-80"/>
    </wire>
    <wire>
      <p1 x="720" y="400"/>
      <p2 x="780" y="400"/>
    </wire>
    <wire>
      <p1 x="1160" y="400"/>
      <p2 x="1300" y="400"/>
    </wire>
    <wire>
      <p1 x="1020" y="80"/>
      <p2 x="1100" y="80"/>
    </wire>
    <wire>
      <p1 x="1120" y="80"/>
      <p2 x="1300" y="80"/>
    </wire>
    <wire>
      <p1 x="400" y="80"/>
      <p2 x="700" y="80"/>
    </wire>
    <wire>
      <p1 x="620" y="340"/>
      <p2 x="720" y="340"/>
    </wire>
    <wire>
      <p1 x="1020" y="20"/>
      <p2 x="1040" y="20"/>
    </wire>
    <wire>
      <p1 x="600" y="20"/>
      <p2 x="720" y="20"/>
    </wire>
    <wire>
      <p1 x="740" y="280"/>
      <p2 x="860" y="280"/>
    </wire>
    <wire>
      <p1 x="1280" y="160"/>
      <p2 x="1300" y="160"/>
    </wire>
    <wire>
      <p1 x="1020" y="160"/>
      <p2 x="1260" y="160"/>
    </wire>
    <wire>
      <p1 x="640" y="160"/>
      <p2 x="660" y="160"/>
    </wire>
    <wire>
      <p1 x="540" y="480"/>
      <p2 x="740" y="480"/>
    </wire>
    <wire>
      <p1 x="640" y="420"/>
      <p2 x="780" y="420"/>
    </wire>
    <wire>
      <p1 x="1020" y="100"/>
      <p2 x="1120" y="100"/>
    </wire>
    <wire>
      <p1 x="1060" y="-40"/>
      <p2 x="1300" y="-40"/>
    </wire>
    <wire>
      <p1 x="1020" y="40"/>
      <p2 x="1060" y="40"/>
    </wire>
    <wire>
      <p1 x="1100" y="40"/>
      <p2 x="1300" y="40"/>
    </wire>
    <wire>
      <p1 x="640" y="40"/>
      <p2 x="720" y="40"/>
    </wire>
    <wire>
      <p1 x="980" y="360"/>
      <p2 x="1300" y="360"/>
    </wire>
    <wire>
      <p1 x="760" y="360"/>
      <p2 x="780" y="360"/>
    </wire>
    <wire>
      <p1 x="620" y="360"/>
      <p2 x="640" y="360"/>
    </wire>
    <wire>
      <p1 x="140" y="300"/>
      <p2 x="320" y="300"/>
    </wire>
    <wire>
      <p1 x="620" y="300"/>
      <p2 x="640" y="300"/>
    </wire>
    <wire>
      <p1 x="840" y="240"/>
      <p2 x="860" y="240"/>
    </wire>
    <wire>
      <p1 x="620" y="440"/>
      <p2 x="700" y="440"/>
    </wire>
    <wire>
      <p1 x="700" y="440"/>
      <p2 x="780" y="440"/>
    </wire>
    <wire>
      <p1 x="1020" y="120"/>
      <p2 x="1300" y="120"/>
    </wire>
    <wire>
      <p1 x="1020" y="60"/>
      <p2 x="1080" y="60"/>
    </wire>
    <wire>
      <p1 x="980" y="380"/>
      <p2 x="1160" y="380"/>
    </wire>
    <wire>
      <p1 x="740" y="380"/>
      <p2 x="780" y="380"/>
    </wire>
    <wire>
      <p1 x="1120" y="80"/>
      <p2 x="1120" y="100"/>
    </wire>
    <wire>
      <p1 x="1280" y="140"/>
      <p2 x="1280" y="160"/>
    </wire>
    <wire>
      <p1 x="640" y="360"/>
      <p2 x="640" y="420"/>
    </wire>
    <wire>
      <p1 x="640" y="40"/>
      <p2 x="640" y="160"/>
    </wire>
    <wire>
      <p1 x="640" y="160"/>
      <p2 x="640" y="300"/>
    </wire>
    <wire>
      <p1 x="1060" y="-40"/>
      <p2 x="1060" y="40"/>
    </wire>
    <wire>
      <p1 x="740" y="280"/>
      <p2 x="740" y="380"/>
    </wire>
    <wire>
      <p1 x="740" y="460"/>
      <p2 x="740" y="480"/>
    </wire>
    <wire>
      <p1 x="1160" y="380"/>
      <p2 x="1160" y="400"/>
    </wire>
    <wire>
      <p1 x="140" y="300"/>
      <p2 x="140" y="580"/>
    </wire>
    <wire>
      <p1 x="1100" y="40"/>
      <p2 x="1100" y="80"/>
    </wire>
    <wire>
      <p1 x="1260" y="160"/>
      <p2 x="1260" y="200"/>
    </wire>
    <wire>
      <p1 x="720" y="340"/>
      <p2 x="720" y="400"/>
    </wire>
    <wire>
      <p1 x="1040" y="-80"/>
      <p2 x="1040" y="20"/>
    </wire>
    <wire>
      <p1 x="1080" y="0"/>
      <p2 x="1080" y="60"/>
    </wire>
    <wire>
      <p1 x="760" y="260"/>
      <p2 x="760" y="360"/>
    </wire>
    <wire>
      <p1 x="600" y="-100"/>
      <p2 x="600" y="20"/>
    </wire>
    <wire>
      <p1 x="700" y="320"/>
      <p2 x="700" y="440"/>
    </wire>
    <wire>
      <p1 x="700" y="80"/>
      <p2 x="700" y="260"/>
    </wire>
    <wire>
      <p1 x="860" y="240"/>
      <p2 x="860" y="280"/>
    </wire>
  </wires>
  <measurementOrdering/>
</circuit>