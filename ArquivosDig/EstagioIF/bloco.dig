<?xml version="1.0" encoding="utf-8"?>
<circuit>
  <version>2</version>
  <attributes>
    <entry>
      <string>romContent</string>
      <romList>
        <roms/>
      </romList>
    </entry>
    <entry>
      <string>Width</string>
      <int>6</int>
    </entry>
  </attributes>
  <visualElements>
    <visualElement>
      <elementName>Multiplexer</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="200" y="240"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>Label</string>
          <string>jump</string>
        </entry>
      </elementAttributes>
      <pos x="220" y="320"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>Valor do PC para o qual devemos dar jump</string>
        </entry>
        <entry>
          <string>Label</string>
          <string>jump_pc</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="160" y="280"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>pc</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>pc_i:32,clk,reset</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>-- Registrador de 32 bits com entradas PCin, clk, reset e saída PCout

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity pc is
	Port (
    	pc_i : in std_logic_vector(31 downto 0);
    	clk: in std_logic;
        reset: in std_logic;

        pc_o: out std_logic_vector(31 downto 0)
    	);
end pc;

architecture Behavioral of pc is

begin

process(clk, reset)
begin
	if reset = &apos;1&apos; then pc_o &lt;= X&quot;00000000&quot;;
	else
		if clk&apos;event and clk = &apos;1&apos; then
			pc_o &lt;= pc_i;
		end if;
	end if;
end process;

end Behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>pc_o:32</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>6</int>
        </entry>
      </elementAttributes>
      <pos x="300" y="260"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>clk</string>
        </entry>
      </elementAttributes>
      <pos x="160" y="460"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>reset</string>
        </entry>
      </elementAttributes>
      <pos x="160" y="500"/>
    </visualElement>
    <visualElement>
      <elementName>adder.dig</elementName>
      <elementAttributes/>
      <pos x="460" y="60"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>pc_to_addr</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>pc_i:32</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>-- Recebe pc(31 downto 0) e retorna pc(25 downto 2), para ser usado como endereco da memória de instrução.

-- Isso ocorre porque a memória de instrução do Digital só recebe 24 bits de endereço. Para facilitar ao máximo a gente editar a memória de instrução e fazer testes, vou configurar a memória de instrução com 24 bits de endereço e 32 bits por palavra.
-- Como os últimos 2 bits de PC são ignorados, quando somamos PC+4, estamos indo para a próxima palavra de 32 bits da memória de instrução.

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity pc_to_addr is
	Port (
    	pc_i : in std_logic_vector(31 downto 0);
    	
        addr_o: out std_logic_vector(23 downto 0)
    	);
end pc_to_addr;

architecture Behavioral of pc_to_addr is

begin

process(pc_i)
begin
    addr_o &lt;= pc_i(25 downto 2);
end process;

end Behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>addr_o:24</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>7</int>
        </entry>
      </elementAttributes>
      <pos x="460" y="200"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>inst_addr</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>24</int>
        </entry>
      </elementAttributes>
      <pos x="640" y="200"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>inst_i</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="720" y="320"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>IFID</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>pc_i:32,inst_i:32,clk,reset</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>-- Registrador que guarda os dados necessários entre IF e ID. Esses dados são o valor de PC e a instrução da vez
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity IFID is
	Port (
    	pc_i : in std_logic_vector(31 downto 0);
        inst_i: in std_logic_vector(31 downto 0);

    	clk: in std_logic;
        reset: in std_logic;

        pc_o: out std_logic_vector(31 downto 0);
        inst_o: out std_logic_vector(31 downto 0)
    	);
end IFID;

architecture Behavioral of IFID is

begin

process(clk, reset)
begin
	if reset = &apos;1&apos; then
        pc_o &lt;= X&quot;00000000&quot;;
        inst_o &lt;= X&quot;00000000&quot;;
	else
		if clk&apos;event and clk = &apos;1&apos; then
			pc_o &lt;= pc_i;
            inst_o &lt;= inst_i;
		end if;
	end if;
end process;

end Behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>pc_o:32,inst_o:32</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>6</int>
        </entry>
      </elementAttributes>
      <pos x="780" y="320"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>pc_o</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="940" y="300"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>inst_o</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="940" y="340"/>
    </visualElement>
    <visualElement>
      <elementName>Const</elementName>
      <elementAttributes>
        <entry>
          <string>Value</string>
          <long>4</long>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="440" y="60"/>
    </visualElement>
  </visualElements>
  <wires>
    <wire>
      <p1 x="760" y="320"/>
      <p2 x="780" y="320"/>
    </wire>
    <wire>
      <p1 x="720" y="320"/>
      <p2 x="740" y="320"/>
    </wire>
    <wire>
      <p1 x="900" y="320"/>
      <p2 x="920" y="320"/>
    </wire>
    <wire>
      <p1 x="240" y="260"/>
      <p2 x="300" y="260"/>
    </wire>
    <wire>
      <p1 x="440" y="100"/>
      <p2 x="460" y="100"/>
    </wire>
    <wire>
      <p1 x="440" y="200"/>
      <p2 x="460" y="200"/>
    </wire>
    <wire>
      <p1 x="600" y="200"/>
      <p2 x="640" y="200"/>
    </wire>
    <wire>
      <p1 x="260" y="360"/>
      <p2 x="780" y="360"/>
    </wire>
    <wire>
      <p1 x="160" y="460"/>
      <p2 x="260" y="460"/>
    </wire>
    <wire>
      <p1 x="280" y="300"/>
      <p2 x="300" y="300"/>
    </wire>
    <wire>
      <p1 x="920" y="300"/>
      <p2 x="940" y="300"/>
    </wire>
    <wire>
      <p1 x="180" y="240"/>
      <p2 x="200" y="240"/>
    </wire>
    <wire>
      <p1 x="520" y="80"/>
      <p2 x="540" y="80"/>
    </wire>
    <wire>
      <p1 x="160" y="500"/>
      <p2 x="280" y="500"/>
    </wire>
    <wire>
      <p1 x="180" y="20"/>
      <p2 x="540" y="20"/>
    </wire>
    <wire>
      <p1 x="740" y="340"/>
      <p2 x="780" y="340"/>
    </wire>
    <wire>
      <p1 x="900" y="340"/>
      <p2 x="940" y="340"/>
    </wire>
    <wire>
      <p1 x="160" y="280"/>
      <p2 x="200" y="280"/>
    </wire>
    <wire>
      <p1 x="260" y="280"/>
      <p2 x="300" y="280"/>
    </wire>
    <wire>
      <p1 x="420" y="280"/>
      <p2 x="440" y="280"/>
    </wire>
    <wire>
      <p1 x="440" y="280"/>
      <p2 x="760" y="280"/>
    </wire>
    <wire>
      <p1 x="280" y="380"/>
      <p2 x="780" y="380"/>
    </wire>
    <wire>
      <p1 x="440" y="60"/>
      <p2 x="460" y="60"/>
    </wire>
    <wire>
      <p1 x="260" y="280"/>
      <p2 x="260" y="360"/>
    </wire>
    <wire>
      <p1 x="260" y="360"/>
      <p2 x="260" y="460"/>
    </wire>
    <wire>
      <p1 x="180" y="20"/>
      <p2 x="180" y="240"/>
    </wire>
    <wire>
      <p1 x="740" y="320"/>
      <p2 x="740" y="340"/>
    </wire>
    <wire>
      <p1 x="280" y="300"/>
      <p2 x="280" y="380"/>
    </wire>
    <wire>
      <p1 x="280" y="380"/>
      <p2 x="280" y="500"/>
    </wire>
    <wire>
      <p1 x="440" y="100"/>
      <p2 x="440" y="200"/>
    </wire>
    <wire>
      <p1 x="440" y="200"/>
      <p2 x="440" y="280"/>
    </wire>
    <wire>
      <p1 x="760" y="280"/>
      <p2 x="760" y="320"/>
    </wire>
    <wire>
      <p1 x="920" y="300"/>
      <p2 x="920" y="320"/>
    </wire>
    <wire>
      <p1 x="220" y="280"/>
      <p2 x="220" y="320"/>
    </wire>
    <wire>
      <p1 x="540" y="20"/>
      <p2 x="540" y="80"/>
    </wire>
  </wires>
  <measurementOrdering/>
</circuit>